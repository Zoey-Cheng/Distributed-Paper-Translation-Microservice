// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ocr.proto

package v1

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OCRService service

func NewOCRServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OCRService service

type OCRService interface {
	OCR(ctx context.Context, in *OCRParam, opts ...client.CallOption) (*OCRTaskID, error)
	GetStatus(ctx context.Context, in *OCRTaskID, opts ...client.CallOption) (*OCRText, error)
}

type oCRService struct {
	c    client.Client
	name string
}

func NewOCRService(name string, c client.Client) OCRService {
	return &oCRService{
		c:    c,
		name: name,
	}
}

func (c *oCRService) OCR(ctx context.Context, in *OCRParam, opts ...client.CallOption) (*OCRTaskID, error) {
	req := c.c.NewRequest(c.name, "OCRService.OCR", in)
	out := new(OCRTaskID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCRService) GetStatus(ctx context.Context, in *OCRTaskID, opts ...client.CallOption) (*OCRText, error) {
	req := c.c.NewRequest(c.name, "OCRService.GetStatus", in)
	out := new(OCRText)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OCRService service

type OCRServiceHandler interface {
	OCR(context.Context, *OCRParam, *OCRTaskID) error
	GetStatus(context.Context, *OCRTaskID, *OCRText) error
}

func RegisterOCRServiceHandler(s server.Server, hdlr OCRServiceHandler, opts ...server.HandlerOption) error {
	type oCRService interface {
		OCR(ctx context.Context, in *OCRParam, out *OCRTaskID) error
		GetStatus(ctx context.Context, in *OCRTaskID, out *OCRText) error
	}
	type OCRService struct {
		oCRService
	}
	h := &oCRServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OCRService{h}, opts...))
}

type oCRServiceHandler struct {
	OCRServiceHandler
}

func (h *oCRServiceHandler) OCR(ctx context.Context, in *OCRParam, out *OCRTaskID) error {
	return h.OCRServiceHandler.OCR(ctx, in, out)
}

func (h *oCRServiceHandler) GetStatus(ctx context.Context, in *OCRTaskID, out *OCRText) error {
	return h.OCRServiceHandler.GetStatus(ctx, in, out)
}
