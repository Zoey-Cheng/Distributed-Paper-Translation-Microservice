// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: translation.proto

package v1

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TranslationService service

func NewTranslationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TranslationService service

type TranslationService interface {
	Translate(ctx context.Context, in *Translation, opts ...client.CallOption) (*TranslationID, error)
	GetStatus(ctx context.Context, in *TranslationID, opts ...client.CallOption) (*TranslatedText, error)
}

type translationService struct {
	c    client.Client
	name string
}

func NewTranslationService(name string, c client.Client) TranslationService {
	return &translationService{
		c:    c,
		name: name,
	}
}

func (c *translationService) Translate(ctx context.Context, in *Translation, opts ...client.CallOption) (*TranslationID, error) {
	req := c.c.NewRequest(c.name, "TranslationService.Translate", in)
	out := new(TranslationID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationService) GetStatus(ctx context.Context, in *TranslationID, opts ...client.CallOption) (*TranslatedText, error) {
	req := c.c.NewRequest(c.name, "TranslationService.GetStatus", in)
	out := new(TranslatedText)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TranslationService service

type TranslationServiceHandler interface {
	Translate(context.Context, *Translation, *TranslationID) error
	GetStatus(context.Context, *TranslationID, *TranslatedText) error
}

func RegisterTranslationServiceHandler(s server.Server, hdlr TranslationServiceHandler, opts ...server.HandlerOption) error {
	type translationService interface {
		Translate(ctx context.Context, in *Translation, out *TranslationID) error
		GetStatus(ctx context.Context, in *TranslationID, out *TranslatedText) error
	}
	type TranslationService struct {
		translationService
	}
	h := &translationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TranslationService{h}, opts...))
}

type translationServiceHandler struct {
	TranslationServiceHandler
}

func (h *translationServiceHandler) Translate(ctx context.Context, in *Translation, out *TranslationID) error {
	return h.TranslationServiceHandler.Translate(ctx, in, out)
}

func (h *translationServiceHandler) GetStatus(ctx context.Context, in *TranslationID, out *TranslatedText) error {
	return h.TranslationServiceHandler.GetStatus(ctx, in, out)
}
